{"ast":null,"code":"var _jsxFileName = \"/home/iskander/Projects/cryptofaces/client/src/Components/Uploader/ImageUploader.js\";\nimport React, { Fragment, useState } from \"react\";\nimport axios from \"axios\"; //import ImageDetails from \"./Details/ImageDetails\";\n\nimport Message from \"./Message\";\nimport Progress from \"./Progress\";\n\nconst ImageUploader = props => {\n  const [image, setImage] = useState('undefined');\n  const [imageName, setImageName] = useState('choose image');\n  const [imageType, setImageType] = useState('image/undefined');\n  const [imageSize, setImageSize] = useState('0 bytes');\n  const [uploadedImage, setUploadedImage] = useState({\n    imageName: '',\n    imagePath: ''\n  });\n  const [message, setMessage] = useState('');\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n\n  const onChange = e => {\n    setImage(e.target.files[0]);\n    setImageName(e.target.files[0].name);\n    setImageType(e.target.files[0].type);\n    setImageSize(e.target.files[0].size + \" bytes\");\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('image', image);\n\n    try {\n      const res = await axios.post('/artist/upload-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          setUploadPercentage(parseInt(Math.round(progressEvent.loaded * 100 / progressEvent.total))); // Clear Percentage\n\n          setTimeout(() => setUploadPercentage(0), 10000);\n        }\n      });\n      const {\n        imageName,\n        imagePath\n      } = res.data;\n      setUploadedImage({\n        imageName: imageName,\n        imagePath: imagePath\n      });\n      setMessage('Image Uploaded');\n    } catch (e) {\n      if (e.response.status === 500) {\n        setMessage('There was a problem with the server');\n      } else {\n        setMessage(e.response.data.msg);\n      }\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, message ? React.createElement(Message, {\n    msg: message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }) : null, React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"custom-file mt-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    className: \"custom-file-input\",\n    id: \"customFile\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"custom-file-label\",\n    htmlFor: \"customFile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, imageName)), React.createElement(Progress, {\n    percentage: uploadPercentage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Upload\",\n    className: \"btn btn-primary btn-block mt-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), uploadedImage ? React.createElement(\"div\", {\n    className: \"row mt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 m-auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, uploadedImage.imageName), React.createElement(\"img\", {\n    style: {\n      width: '100%'\n    },\n    src: uploadedImage.imagePath,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))) : null);\n};\n\nexport default ImageUploader;","map":{"version":3,"sources":["/home/iskander/Projects/cryptofaces/client/src/Components/Uploader/ImageUploader.js"],"names":["React","Fragment","useState","axios","Message","Progress","ImageUploader","props","image","setImage","imageName","setImageName","imageType","setImageType","imageSize","setImageSize","uploadedImage","setUploadedImage","imagePath","message","setMessage","uploadPercentage","setUploadPercentage","onChange","e","target","files","name","type","size","onSubmit","preventDefault","formData","FormData","append","res","post","headers","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","setTimeout","data","response","status","msg","width"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport axios from \"axios\";\n\n//import ImageDetails from \"./Details/ImageDetails\";\nimport Message from \"./Message\";\nimport Progress from \"./Progress\";\n\nconst ImageUploader = (props) => {\n    const [image, setImage] = useState('undefined');\n    const [imageName, setImageName] = useState('choose image');\n    const [imageType, setImageType] = useState('image/undefined');\n    const [imageSize, setImageSize] = useState('0 bytes');\n    const [uploadedImage, setUploadedImage] = useState({\n        imageName: '',\n        imagePath: ''\n    });\n    const [message, setMessage] = useState('');\n    const [uploadPercentage, setUploadPercentage] = useState(0);\n\n    const onChange = e => {\n        setImage(e.target.files[0]);\n        setImageName(e.target.files[0].name);\n        setImageType(e.target.files[0].type);\n        setImageSize(e.target.files[0].size + \" bytes\");\n    };\n\n    const onSubmit = async e => {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('image', image);\n\n        try {\n            const res = await axios.post('/artist/upload-image', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n                onUploadProgress: progressEvent => {\n                    setUploadPercentage(\n                        parseInt(\n                            Math.round(\n                                (progressEvent.loaded * 100 / progressEvent.total)\n                            )\n                        )\n                    );\n\n                    // Clear Percentage\n                    setTimeout(() => setUploadPercentage(0), 10000)\n                }\n            });\n\n            const { imageName, imagePath } = res.data;\n\n            setUploadedImage({\n                imageName: imageName,\n                imagePath: imagePath\n            });\n\n            setMessage('Image Uploaded');\n        } catch (e) {\n            if (e.response.status === 500) {\n                setMessage('There was a problem with the server');\n            } else {\n                setMessage(e.response.data.msg);\n            }\n        }\n    };\n\n    return (\n        <Fragment>\n            {message ? <Message msg={message} /> : null}\n            <form onSubmit={onSubmit}>\n                <div className=\"custom-file mt-4\">\n                    <input type=\"file\"\n                           className=\"custom-file-input\"\n                           id=\"customFile\"\n                           onChange={onChange}\n                    />\n                    <label className=\"custom-file-label\"\n                           htmlFor=\"customFile\">\n                        {imageName}\n                    </label>\n                </div>\n\n                <Progress percentage={uploadPercentage}/>\n\n                <input type=\"submit\"\n                       value=\"Upload\"\n                       className=\"btn btn-primary btn-block mt-4\"\n                />\n            </form>\n            {/*{ uploadedImage ?\n                <ImageDetails imgName={uploadedImage.imageName} imgPath={uploadedImage.imagePath}/> :\n                <ImageDetails imgName={\"undefined\"} imgPath={\"undefined\"}/>\n            }*/}\n            {uploadedImage ? (\n                <div className='row mt-5'>\n                    <div className='col-md-6 m-auto'>\n                        <h3 className='text-center'>{uploadedImage.imageName}</h3>\n                        <img style={{ width: '100%' }} src={uploadedImage.imagePath} alt='' />\n                    </div>\n                </div>\n            ) : null}\n        </Fragment>\n    );\n};\n\nexport default ImageUploader;"]},"metadata":{},"sourceType":"module"}